{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../customer.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction AddCustomerComponent_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\");\n    i0.ɵɵtext(1, \" Form is currently invalid\\n\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AddCustomerComponent {\n  constructor(customerService) {\n    this.customerService = customerService;\n    this.customerAdded = new EventEmitter();\n    this.form = new FormGroup({\n      firstName: new FormControl('', {\n        nonNullable: true,\n        validators: [Validators.required]\n      }),\n      lastName: new FormControl('', {\n        nonNullable: true,\n        validators: [Validators.required]\n      }),\n      email: new FormControl('', {\n        nonNullable: true,\n        validators: [Validators.required, Validators.email]\n      }),\n      address: new FormControl('', {\n        nonNullable: true,\n        validators: [Validators.required]\n      }),\n      mobile: new FormControl('', {\n        nonNullable: true,\n        validators: [Validators.required]\n      })\n    });\n  }\n  submit() {\n    this.form.markAllAsTouched();\n    if (!this.form.valid) {\n      return;\n    }\n    this.customerService.addCustomer(this.form.getRawValue()).subscribe(newCustomer => {\n      this.customerAdded.emit();\n      this.form.reset();\n    });\n  }\n}\nAddCustomerComponent.ɵfac = function AddCustomerComponent_Factory(t) {\n  return new (t || AddCustomerComponent)(i0.ɵɵdirectiveInject(i1.CustomerService));\n};\nAddCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddCustomerComponent,\n  selectors: [[\"app-add-customer\"]],\n  outputs: {\n    customerAdded: \"customerAdded\"\n  },\n  decls: 25,\n  vars: 6,\n  consts: [[4, \"ngIf\"], [3, \"formControl\"], [3, \"click\"]],\n  template: function AddCustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h4\");\n      i0.ɵɵtext(1, \"New Customer Details\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, AddCustomerComponent_label_2_Template, 2, 0, \"label\", 0);\n      i0.ɵɵelementStart(3, \"div\")(4, \"label\");\n      i0.ɵɵtext(5, \"First name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\")(8, \"label\");\n      i0.ɵɵtext(9, \"Last name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\")(12, \"label\");\n      i0.ɵɵtext(13, \"Address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\")(16, \"label\");\n      i0.ɵɵtext(17, \"Mobile\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\")(20, \"label\");\n      i0.ɵɵtext(21, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AddCustomerComponent_Template_button_click_23_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtext(24, \"Submit\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.invalid);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.form.controls.firstName);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.form.controls.lastName);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.form.controls.address);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.form.controls.mobile);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.form.controls.email);\n    }\n  },\n  dependencies: [i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,YAAY,QAAgB,eAAe;AAC/D,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;ICAnEC,6BAA4B;IACxBA,4CACJ;IAAAA,iBAAQ;;;ADKR,OAAM,MAAOC,oBAAoB;EAS/BC,YAA6BC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;IARlC,kBAAa,GAAG,IAAIP,YAAY,EAAE;IAC5C,SAAI,GAAG,IAAIE,SAAS,CAAC;MACnBM,SAAS,EAAE,IAAIP,WAAW,CAAS,EAAE,EAAE;QAAEQ,WAAW,EAAE,IAAI;QAAEC,UAAU,EAAE,CAACP,UAAU,CAACQ,QAAQ;MAAC,CAAE,CAAC;MAChGC,QAAQ,EAAE,IAAIX,WAAW,CAAS,EAAE,EAAE;QAAEQ,WAAW,EAAE,IAAI;QAAEC,UAAU,EAAE,CAACP,UAAU,CAACQ,QAAQ;MAAC,CAAE,CAAC;MAC/FE,KAAK,EAAE,IAAIZ,WAAW,CAAS,EAAE,EAAE;QAAEQ,WAAW,EAAE,IAAI;QAAEC,UAAU,EAAE,CAACP,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACU,KAAK;MAAC,CAAE,CAAC;MAC9GC,OAAO,EAAE,IAAIb,WAAW,CAAS,EAAE,EAAE;QAAEQ,WAAW,EAAE,IAAI;QAAEC,UAAU,EAAE,CAACP,UAAU,CAACQ,QAAQ;MAAC,CAAE,CAAC;MAC9FI,MAAM,EAAE,IAAId,WAAW,CAAS,EAAE,EAAE;QAAEQ,WAAW,EAAE,IAAI;QAAEC,UAAU,EAAE,CAACP,UAAU,CAACQ,QAAQ;MAAC,CAAE;KAC7F,CAAC;EAC+D;EACjEK,MAAM;IACJ,IAAI,CAACC,IAAI,CAACC,gBAAgB,EAAE;IAC5B,IAAI,CAAC,IAAI,CAACD,IAAI,CAACE,KAAK,EAAE;MACpB;;IAEF,IAAI,CAACZ,eAAe,CAACa,WAAW,CAAC,IAAI,CAACH,IAAI,CAACI,WAAW,EAAE,CAAC,CAACC,SAAS,CAACC,WAAW,IAAG;MAChF,IAAI,CAACC,aAAa,CAACC,IAAI,EAAE;MACzB,IAAI,CAACR,IAAI,CAACS,KAAK,EAAE;IACnB,CAAC,CAAC;EACJ;;AAnBWrB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAsB;EAAAC;IAAAJ;EAAA;EAAAK;EAAAC;EAAAC;EAAAC;IAAA;MCRjC5B,0BAAI;MAAAA,oCAAoB;MAAAA,iBAAK;MAC7BA,yEAEQ;MACRA,2BAAK;MACMA,0BAAU;MAAAA,iBAAQ;MACzBA,2BAAiD;MACrDA,iBAAM;MACNA,2BAAK;MACMA,yBAAS;MAAAA,iBAAQ;MACxBA,4BAAgD;MACpDA,iBAAM;MACNA,4BAAK;MACMA,wBAAO;MAAAA,iBAAQ;MACtBA,4BAA+C;MACnDA,iBAAM;MACNA,4BAAK;MACMA,uBAAM;MAAAA,iBAAQ;MACrBA,4BAA8C;MAClDA,iBAAM;MAENA,4BAAK;MACMA,sBAAK;MAAAA,iBAAQ;MACpBA,4BAA6C;MACjDA,iBAAM;MAENA,kCAA2B;MAAnBA;QAAA,OAAS6B,YAAQ;MAAA,EAAC;MAAC7B,uBAAM;MAAAA,iBAAS;;;MAzBlCA,eAAkB;MAAlBA,uCAAkB;MAKfA,eAAuC;MAAvCA,yDAAuC;MAIvCA,eAAsC;MAAtCA,wDAAsC;MAItCA,eAAqC;MAArCA,uDAAqC;MAIrCA,eAAoC;MAApCA,sDAAoC;MAKpCA,eAAmC;MAAnCA,qDAAmC","names":["EventEmitter","FormControl","FormGroup","Validators","i0","AddCustomerComponent","constructor","customerService","firstName","nonNullable","validators","required","lastName","email","address","mobile","submit","form","markAllAsTouched","valid","addCustomer","getRawValue","subscribe","newCustomer","customerAdded","emit","reset","selectors","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\tsuna\\source\\repos\\SmarterCitySolutionsTechTest\\angularapp\\src\\app\\add-customer\\add-customer.component.ts","C:\\Users\\tsuna\\source\\repos\\SmarterCitySolutionsTechTest\\angularapp\\src\\app\\add-customer\\add-customer.component.html"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { CustomerService } from '../customer.service';\n@Component({\n  selector: 'app-add-customer',\n  templateUrl: './add-customer.component.html',\n  styleUrls: ['./add-customer.component.css']\n})\nexport class AddCustomerComponent {\n  @Output() customerAdded = new EventEmitter();\n  form = new FormGroup({\n    firstName: new FormControl<string>('', { nonNullable: true, validators: [Validators.required] }),\n    lastName: new FormControl<string>('', { nonNullable: true, validators: [Validators.required] }),\n    email: new FormControl<string>('', { nonNullable: true, validators: [Validators.required, Validators.email] }),\n    address: new FormControl<string>('', { nonNullable: true, validators: [Validators.required] }),\n    mobile: new FormControl<string>('', { nonNullable: true, validators: [Validators.required] })\n  })\n  constructor(private readonly customerService: CustomerService) { }\n  submit() {\n    this.form.markAllAsTouched();\n    if (!this.form.valid) {\n      return;\n    }\n    this.customerService.addCustomer(this.form.getRawValue()).subscribe(newCustomer => {\n      this.customerAdded.emit();\n      this.form.reset();\n    });\n  }\n}\n","<h4>New Customer Details</h4>\n<label *ngIf=\"form.invalid\">\n    Form is currently invalid\n</label>\n<div>\n    <label>First name</label>\n    <input [formControl]=\"form.controls.firstName\" />\n</div>\n<div>\n    <label>Last name</label>\n    <input [formControl]=\"form.controls.lastName\" />\n</div>\n<div>\n    <label>Address</label>\n    <input [formControl]=\"form.controls.address\" />\n</div>\n<div>\n    <label>Mobile</label>\n    <input [formControl]=\"form.controls.mobile\" />\n</div>\n\n<div>\n    <label>Email</label>\n    <input [formControl]=\"form.controls.email\" />\n</div>\n\n<button (click)=\"submit()\">Submit</button>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}